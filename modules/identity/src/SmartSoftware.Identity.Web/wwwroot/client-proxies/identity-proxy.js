/* This file is automatically generated by SS framework to use MVC Controllers from javascript. */


// module identity

(function(){

  // controller smartsoftware.identity.identityRole

  (function(){

    ss.utils.createNamespace(window, 'smartsoftware.identity.identityRole');

    smartsoftware.identity.identityRole.getAllList = function(ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles/all',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityRole.getList = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles' + ss.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityRole.get = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityRole.create = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    smartsoftware.identity.identityRole.update = function(id, input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    smartsoftware.identity.identityRole['delete'] = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/roles/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

  })();

  // controller smartsoftware.identity.identityUser

  (function(){

    ss.utils.createNamespace(window, 'smartsoftware.identity.identityUser');

    smartsoftware.identity.identityUser.get = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.getList = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users' + ss.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.create = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.update = function(id, input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser['delete'] = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.getRoles = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/' + id + '/roles',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.getAssignableRoles = function(ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/assignable-roles',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.updateRoles = function(id, input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/' + id + '/roles',
        type: 'PUT',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.findByUsername = function(userName, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/by-username/' + userName + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUser.findByEmail = function(email, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/by-email/' + email + '',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller smartsoftware.identity.identityUserLookup

  (function(){

    ss.utils.createNamespace(window, 'smartsoftware.identity.identityUserLookup');

    smartsoftware.identity.identityUserLookup.findById = function(id, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/lookup/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUserLookup.findByUserName = function(userName, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/lookup/by-username/' + userName + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUserLookup.search = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/lookup/search' + ss.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    smartsoftware.identity.identityUserLookup.getCount = function(input, ajaxParams) {
      return ss.ajax($.extend(true, {
        url: ss.appPath + 'api/identity/users/lookup/count' + ss.utils.buildQueryString([{ name: 'filter', value: input.filter }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

  })();

})();


