// This file is automatically generated by SS framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using SmartSoftware;
using SmartSoftware.Application.Dtos;
using SmartSoftware.DependencyInjection;
using SmartSoftware.Http.Client;
using SmartSoftware.Http.Client.ClientProxying;
using SmartSoftware.Http.Modeling;
using SmartSoftware.Identity;
using SmartSoftware.Users;

// ReSharper disable once CheckNamespace
namespace SmartSoftware.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityUserLookupAppService), typeof(IdentityUserLookupClientProxy))]
public partial class IdentityUserLookupClientProxy : ClientProxyBase<IIdentityUserLookupAppService>, IIdentityUserLookupAppService
{
    public virtual async Task<UserData> FindByIdAsync(Guid id)
    {
        return await RequestAsync<UserData>(nameof(FindByIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserData> FindByUserNameAsync(string userName)
    {
        return await RequestAsync<UserData>(nameof(FindByUserNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), userName }
        });
    }

    public virtual async Task<ListResultDto<UserData>> SearchAsync(UserLookupSearchInputDto input)
    {
        return await RequestAsync<ListResultDto<UserData>>(nameof(SearchAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLookupSearchInputDto), input }
        });
    }

    public virtual async Task<long> GetCountAsync(UserLookupCountInputDto input)
    {
        return await RequestAsync<long>(nameof(GetCountAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLookupCountInputDto), input }
        });
    }
}
