// This file is automatically generated by SS framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using SmartSoftware;
using SmartSoftware.Application.Dtos;
using SmartSoftware.DependencyInjection;
using SmartSoftware.Http.Client;
using SmartSoftware.Http.Client.ClientProxying;
using SmartSoftware.Http.Modeling;
using SmartSoftware.Blogging.Comments;
using SmartSoftware.Blogging.Comments.Dtos;

// ReSharper disable once CheckNamespace
namespace SmartSoftware.Blogging;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICommentAppService), typeof(CommentsClientProxy))]
public partial class CommentsClientProxy : ClientProxyBase<ICommentAppService>, ICommentAppService
{
    public virtual async Task<List<CommentWithRepliesDto>> GetHierarchicalListOfPostAsync(Guid postId)
    {
        return await RequestAsync<List<CommentWithRepliesDto>>(nameof(GetHierarchicalListOfPostAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), postId }
        });
    }

    public virtual async Task<CommentWithDetailsDto> CreateAsync(CreateCommentDto input)
    {
        return await RequestAsync<CommentWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateCommentDto), input }
        });
    }

    public virtual async Task<CommentWithDetailsDto> UpdateAsync(Guid id, UpdateCommentDto input)
    {
        return await RequestAsync<CommentWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateCommentDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
